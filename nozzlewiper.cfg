###############################################################################
## NOZZLE WIPER v2 - A nozzle purge bucket and brush for the Voron 0.1
##
## Configuration:
##
## 1.  Set the correct PWM pin that you connected the Orange wire
##     to in the [servo wipeServo] section replacing XXNN
## 2.  Home X, Y and Z axes
## 3.  Lower Z by at least 50mm
## 4.  Run the NW_DEPLOY macro and ensure the servo extends the arm 90 degrees
## 5.  Use the printer controls to move the nozzle so that it is in the centre
##     of the purge bucket on the X and Y axis
## 7.  Run M114 to get the nozzle position and set variable_x and variable_y.
##     If you do not set these values the macro will fail as the defaults are
##     deliberately wrong
## 8.  Move the nozzle into the center of the brush and raise the Nozzle Wiper
##     on the frame mount until the nozzle just rests into the brush. Try not
##     to let the brush touch the sock or it could wear it out prematurely.
##     Secure the position by tightening the 2 M3x8mm screws on the frame mount
## 9.  Move the nozzle out of the way from the brush and purge bucket
## 10. Run NW_RETRACT and ensure the servo moves the arm back away to the side
##
## Testing:
##
## 1.  Heat the nozzle to the printing temperature of the loaded filament
## 2.  Home all axes
## 3.  Be prepared to hit the Emergency Stop button if things don't go as they
##     should
## 4.  Run NW_CLEAN_NOZZLE
##
## That should be all changes needed. Call the NW_CLEAN_NOZZLE macro from
## the end of your START_PRINT macro to wipe the nozzle clean before printing
###############################################################################

[servo wipeServo]
pin: gpio29
maximum_servo_angle: 180
minimum_pulse_width: 0.0005
maximum_pulse_width: 0.0025

[gcode_macro NW_TEST_CLEAN_NOZZLE]
gcode:
    M104 S240
    G28
    M109 S240
    NW_CLEAN_NOZZLE

[gcode_macro NW_CLEAN_NOZZLE]
gcode:
    STATUS_CLEANING

    {% if "xyz" in printer.toolhead.homed_axes %}
        SAVE_GCODE_STATE NAME=NW_CLEAN_NOZZLE
        G90
        NW_DEPLOY
        NW_PURGE
        NW_WIPE
        NW_RETRACT
        RESTORE_GCODE_STATE NAME=NW_CLEAN_NOZZLE
    {% else %}
        { action_raise_error("Home All Axis First") }
        M117 Home All Axis First
    {% endif %}

    STATUS_READY

[gcode_macro NW_BUCKET_POS]
# Sensible values for variable_x would be 32, but adjust as per the instructions
variable_x: 28
# Sensible values for variable_y would be around 60, but adjust as per the instructions
variable_y: 40
# Sensible value for variable_z is 50
variable_z: 60
gcode:
    M118 bucket pos X:{printer["gcode_macro NW_BUCKET_POS"].x} Y:{printer["gcode_macro NW_BUCKET_POS"].y} Z:{printer["gcode_macro NW_BUCKET_POS"].z}

[gcode_macro NW_DEPLOY]
gcode:
    G90
    G0 Z{printer["gcode_macro NW_BUCKET_POS"].z}
    SET_SERVO SERVO=wipeServo ANGLE=0
    M400
    G4 P500

[gcode_macro NW_RETRACT]
gcode:
    SET_SERVO SERVO=wipeServo ANGLE=100
    M400
    G4 P500
    SET_SERVO SERVO=wipeServo WIDTH=0 # OFF
    G4 P500

[gcode_macro NW_WIPE]

# If you want a hot to cold cleaning enabled, set to True (and vice versa).
variable_enable_hotcold:            True

# These parameters define your scrubbing, travel speeds, safe z clearance and how many times you want to wipe. Update as necessary. Wipe
# direction is randomized based off whether the left or right bucket is randomly selected in the purge & scrubbing routine.
variable_wipe_qty:            128	         ; Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_prep_spd_xy:       18000	         ; Travel (not cleaning) speed along x and y-axis in mm/min.
variable_prep_spd_z:         1800	         ; Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:        3000	         ; Nozzle wipe speed in mm/min.
variable_scrub_temp_min:      150	         ; Minimum nozzle temperature to permit scrubbing. Otherwise, scrub will end at or below this temperature.

# These parameters define the size of the brush. Update as necessary. A visual reference is provided below. Note that orientation of
# parameters remain the same whether bucket is at rear or front.
#
#                 brush_start
#                     (y)
#                   _______
#                  |       |
#               ↑  |       |
#                  |       |
#     brush_length |       | (x) brush_front
#                  |       |
#               ↓  |       |
#                  |_______|
#
#               ← brush_depth →
#
# ________________________________________________
#                PRINTER FRONT
#
#
variable_brush_start:          56

variable_brush_length:         52

variable_brush_front:       12
variable_brush_depth:       6

variable_brush_segments:    20

gcode:
    STATUS_CLEANING

    ## Set temp to min scrub temp to allow nozzle to cool during scrubbing
    {% if enable_hotcold == True %}
        M104 S{scrub_temp_min}
    {% endif %}

    M106 S255                                           # Turns on the PT-fan

    M400

    ## Set wipe backoffice
    {% set brush_step = brush_length / brush_segments %}
    {% set brush_lanes = [ brush_front, brush_front-brush_depth/3, brush_front-brush_depth/3*2, brush_front-brush_depth ] %}

    G90
    G0 Z{printer["gcode_macro NW_BUCKET_POS"].z} F{prep_spd_z}
    G0 Y{brush_start + 10} F{prep_spd_xy}
    G0 X{brush_front - (brush_depth / 2)}
    G0 Y{brush_start} F{prep_spd_xy}
    G1 F{wipe_spd_xy}
    SET_GCODE_VARIABLE MACRO=_clean_nozzle_move  VARIABLE=move VALUE=True
    {% for wipes in range(1, 128) %}
        {%for segments in range(1, (brush_segments+1)) %}
            _clean_nozzle_move X={brush_lanes[range(4)|random]} Y={brush_start - brush_step*segments }
        {% endfor %}
        {%for segments in range(1, (brush_segments+1)) %}
            _clean_nozzle_move X={brush_lanes[range(4)|random]} Y={brush_start - brush_length + brush_step*segments }
        {% endfor %}
        {% if enable_hotcold == True %}
            _clean_nozzle_cooldown_check
        {% endif %}
    {% endfor %}

    M400

    M106 S0                                             # Turns off the PT-fan

    ## Clear from area.
    M117 Cleaned!
    G0 Y{brush_start + 10} F{prep_spd_xy}
    G0 X60 F{prep_spd_xy}
    G0 Y60 F{prep_spd_xy}

    STATUS_READY

[gcode_macro NW_PURGE]
# These parameters define your filament purging. The retract variable is used to retract right after purging to prevent unnecessary
# oozing. Some filament are particularly oozy and may continue to ooze out of the nozzle for a second or two after retracting. The
# ooze dwell variable makes allowance for this. Update as necessary. If you decided to not enable purge, you can ignore this section.
variable_purge_len:            10	         ; Amount of filament, in mm, to purge.
variable_purge_spd:           150	         ; Speed, in mm/min, of the purge.
variable_purge_temp_min:      240	         ; Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_ret:             2	         ; Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
variable_ooze_dwell:            2	         ; Dwell/wait time, in seconds, after purging and retracting.
gcode:
    G90
    G0 Z{printer["gcode_macro NW_BUCKET_POS"].z} F6000
    G0 Y{printer["gcode_macro NW_BUCKET_POS"].y+40} F6000
    G0 X{printer["gcode_macro NW_BUCKET_POS"].x}
    G0 Y{printer["gcode_macro NW_BUCKET_POS"].y} F6000
    {% if printer.extruder.temperature >= purge_temp_min %}
        CONDITIONAL_UNRETRACT
        M83      ; relative mode
        G1 E{purge_len} F{purge_spd}
        G1 E-{purge_ret} F{purge_spd * 5}
        G4 P{ooze_dwell * 1000}
        G92 E0   ; reset extruder
    # {% else %}
    #     { action_raise_error("Nozzle Temp must be > 180C") }
    {% endif %}

[gcode_macro _clean_nozzle_move]
variable_move: True
gcode:
    {% if move == True %}
        {% set x = params.X %}
        {% set y = params.Y %}
        G1 X{x} Y{y}
    {% endif %}

[gcode_macro _clean_nozzle_cooldown_check]
gcode:
    {% set extruder_temperature = printer[printer.toolhead.extruder].temperature %}
    {% set extruder_target = printer[printer.toolhead.extruder].target %}
    {% if extruder_temperature < extruder_target + 1 %}
        SET_GCODE_VARIABLE MACRO=_clean_nozzle_move  VARIABLE=move VALUE=False
    {% endif %}
