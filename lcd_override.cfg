# This file contains customizations for the lcd display menus
# Overrides sections defined in klipper/klippy/extras/display/menu.cfg
# See klipper/klippy/extras/display/menu.cfg for default menu config

### menu tune ###
[menu __main __tune]
type: list
name: Tune

[menu __main __tune __save_offsetz]
type: command
name: Save Z Offset
gcode:
    {% if ('probe' in printer) and ('probe:z_virtual_endstop' in printer.configfile.settings['stepper_z'].endstop_pin) %}
        Z_OFFSET_APPLY_PROBE
    {% else %}
        Z_OFFSET_APPLY_ENDSTOP
    {% endif %}

### menu octoprint ###
[menu __main __octoprint]
type: disabled

### menu control ###
# [menu __main __control __caselightonoff]
# type: input
# enable: {'neopixel panel_right' in printer}
# name: Lights: {'ON ' if menu.input else 'OFF'}
# input: {printer['neopixel panel_right'].color_data[0][0]}
# input_min: 0
# input_max: 1
# input_step: 1
# gcode:
#     {% if menu.input %}
#         {% if printer.idle_timeout.state|upper == "PRINTING" %}
#             SET_LED_EFFECT EFFECT=panel_on REPLACE=1 FADETIME=1.0
#         {% else %}
#             SET_LED_EFFECT EFFECT=panel_idle REPLACE=1 FADETIME=1.0
#         {% endif %}
#     {% else %}
#         STOP_LED_EFFECTS LEDS="neopixel:panel_right" FADETIME=1.0
#         STOP_LED_EFFECTS LEDS="neopixel:panel_left" FADETIME=1.0
#     {% endif %}

# [menu __main __control __caselightpwm]
# type: input
# enable: {'neopixel panel_right' in printer}
# name: Lights: {'%3d' % (menu.input*100)}%
# input: {printer['neopixel panel_right'].color_data[0][0]}
# input_min: 0.0
# input_max: 1.0
# input_step: 0.01
# gcode:
#     SET_LED LED=panel_right RED={menu.input} GREEN={menu.input} BLUE={menu.input*0.75}
#     SET_LED LED=panel_left RED={menu.input} GREEN={menu.input} BLUE={menu.input*0.75}

[menu __main __control __unsafe_lower_bed]
type: command
enable: {"z" not in printer.toolhead.homed_axes}
name: Unsafe Lower Bed
gcode: UNSAFE_LOWER_BED

[menu __main __control __macros]
type: list
name: Macros

[menu __main __control __macros __top]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Top
gcode: TOP

[menu __main __control __macros __middle]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Middle
gcode: MIDDLE

[menu __main __control __macros __bottom]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Bottom
gcode: BOTTOM

[menu __main __control __macros __smart_park]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Smart Park
gcode: SMART_PARK

[menu __main __control __macros __front]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Front
gcode: FRONT

[menu __main __control __macros __center]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Center
gcode: CENTER

[menu __main __control __macros __rear]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Rear
gcode: REAR

[menu __main __control __macros __unsafe_lower_bed]
type: command
enable: {"z" not in printer.toolhead.homed_axes}
name: Unsafe Lower Bed
gcode: UNSAFE_LOWER_BED

### menu temperature ###
# [menu __main __temp __preheat_petg]
# type: list
# name: Preheat PETG

# [menu __main __temp __preheat_petg __all]
# type: command
# enable: {('extruder' in printer) and ('heater_bed' in printer)}
# name: Preheat all
# gcode:
#     M140 S80
#     M104 S230

# [menu __main __temp __preheat_petg __hotend]
# type: command
# enable: {'extruder' in printer}
# name: Preheat hotend
# gcode: M104 S230

# [menu __main __temp __preheat_petg __hotbed]
# type: command
# enable: {'heater_bed' in printer}
# name: Preheat hotbed
# gcode: M140 S80

[menu __main __temp __cooldown]
type: list
name: Cooldown

[menu __main __temp __cooldown __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Cooldown all
gcode:
    M104 S0
    M140 S0

[menu __main __temp __cooldown __hotend]
type: command
enable: {'extruder' in printer}
name: Cooldown hotend
gcode: M104 S0

[menu __main __temp __cooldown __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Cooldown hotbed
gcode: M140 S0

### menu filament ###
[menu __main __filament __loadf]
type: command
name: Load Fil. fast
enable: false

[menu __main __filament __loads]
type: command
name: Load Filament
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    LOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type: command
name: Unload Fil.fast
enable: false

[menu __main __filament __unloads]
type: command
name: Unload Filament
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    UNLOAD_FILAMENT
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __purge]
type: command
name: Purge Filament
gcode: PURGE_FILAMENT

[menu __main __filament __feed]
type: input
name: Feed: {'%.1f' % menu.input}
input: 5
# input_min: 0
input_max: {printer.configfile.settings['extruder'].max_extrude_only_distance|default(50)}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E{'%.1f' % menu.input} F300
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __line_purge]
type: command
name: Line Purge
gcode: LINE_PURGE

[menu __main __filament __voron_purge]
type: command
name: Voron Purge
gcode: VORON_PURGE

### menu setup ###
[menu __main __setup __shutdown]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Shut down
gcode: SHUTDOWN

[menu __main __setup __tuning __hotend_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: Tune Hotend PID
gcode:
    CENTER
    G1 Z10 F1500
    STATUS_HEATING
    M106 S64
    M117 PID_CALIBRATE HEATER=extruder TARGET=245
    PID_CALIBRATE HEATER=extruder TARGET=245 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Tune Hotbed PID
gcode:
    CENTER
    G1 Z10 F1500
    STATUS_HEATING
    M117 PID_CALIBRATE HEATER=heater_bed TARGET=100
    PID_CALIBRATE HEATER=heater_bed TARGET=100 WRITE_FILE=1

# [menu __main __setup __calib __offsetz]
# type: input
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Offset Z:{'%05.3f' % menu.input}
# input: {printer.gcode_move.homing_origin.z}
# input_min: -5
# input_max: 5
# input_step: 0.005
# realtime: True
# gcode:
#     SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

# [menu __main __setup __calib __save_offsetz]
# type: command
# enable: {not printer.idle_timeout.state == "Printing"}
# name: Save Z Offset
# gcode:
#     {% if ('probe' in printer) and ('probe:z_virtual_endstop' in printer.configfile.settings['stepper_z'].endstop_pin) %}
#         Z_OFFSET_APPLY_PROBE
#     {% else %}
#         Z_OFFSET_APPLY_ENDSTOP
#     {% endif %}
