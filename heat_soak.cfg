
[gcode_macro HEAT_SOAK]
variable_led_count: 10
gcode:
    {% set target_chamber = params.CHAMBER|default(20)|int %}
    {% set ext_assist_temp = [target_chamber * 4, 200]|min %}
    {% set bed_assist_temp = [target_chamber * 4, 110]|min %}

    {% if printer["temperature_sensor chamber"].temperature < target_chamber %}
        M104 S{ext_assist_temp}
        {% if target_chamber > 40 %}
            M140 S{bed_assist_temp}
        {% endif %}
    {% endif %}

    M400 ; wait for buffer to clear
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=0
    SET_DISPLAY_TEXT MSG="Preheating..."
    STOP_LED_EFFECTS FADETIME=1.0
    G4 P1000
    SET_LED_EFFECT EFFECT=panel_idle REPLACE=1 FADETIME=1.0
    SET_LED_EFFECT EFFECT=preheat_logo REPLACE=1 FADETIME=1.0

    {% if printer["temperature_sensor chamber"].temperature < target_chamber %}
        SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}C"  # Displays info
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
        G4 P1000
    {% endif %}

    # Get DURATION in minutes and convert to milliseconds
    {% set DURATION_MS = ( params.DURATION|default(15)|float * 60000 )|int %}
    # Calculate the number of times to refresh the LEDs
    {% set frame_rate = params.FRAME_RATE|default(24)|int %}
    {% set refresh_delay = 1000 / frame_rate %}
    {% set REFRESH_COUNT = ( DURATION_MS / refresh_delay )|int %}
    # For each refresh of the LEDs:
    {% for refresh_index in range(0, REFRESH_COUNT) %}
        # Calculate the total milliseconds until the preheat timer is complete
        {% set MILLISECONDS_REMAINING = refresh_delay * ( REFRESH_COUNT - refresh_index ) %}
        # Convert the total time remaining into minutes and seconds
        {% set MINUTES_REMAINING = ( MILLISECONDS_REMAINING / 60000 ) %}
        {% set SECONDS_REMAINING = ( MILLISECONDS_REMAINING / 1000 ) %}
        # Format the minutes and seconds for a clock-style display
        {% set MINUTES_FORMATED = MINUTES_REMAINING|int %}
        {% set SECONDS_FORMATED = ( SECONDS_REMAINING - ( 60 * ( SECONDS_REMAINING / 60 )|int ) )|int %}
        # Display the current time remaining
        SET_DISPLAY_TEXT MSG="{"Heatsoak: %02d:%02d"|format(MINUTES_FORMATED, SECONDS_FORMATED)}"

        # # Calculate the number of refresh cycles per led
        # {% set SUB_REFRESH_COUNT = REFRESH_COUNT / led_count %}
        # # Calculate the color fade scaling coefficient
        # {% set COLOR_MOD = ( refresh_index - ( SUB_REFRESH_COUNT * ( refresh_index / SUB_REFRESH_COUNT )|int ) )|int %}
        # # Normalize the scaling coefficient
        # {% set COLOR_SCALE = COLOR_MOD / SUB_REFRESH_COUNT %}

        # # Calculate the progress LED index as proportional to the refresh index
        # {% set progress_index = (led_count * refresh_index / REFRESH_COUNT)|int + 1 %}

        # {% for led_index in range(1, led_count+1) %}
        #     {% if led_index < progress_index %}
        #         # # Set the previous LEDs to the final color
        #         SET_LED LED=panel_right RED=0.0 GREEN=0.4 BLUE=0.0 INDEX={led_index}
        #         SET_LED LED=panel_left RED=0.0 GREEN=0.4 BLUE=0.0 INDEX={led_index}
        #     {% elif led_index == progress_index %}
        #         # Set the current progress LED to the dynamic color value
        #         SET_LED LED=panel_right RED={0.4*(1-COLOR_SCALE)} GREEN={0.4*COLOR_SCALE} BLUE=0.0 INDEX={led_index}
        #         SET_LED LED=panel_left RED={0.4*(1-COLOR_SCALE)} GREEN={0.4*COLOR_SCALE} BLUE=0.0 INDEX={led_index}
        #     {% else %}
        #         # Set the remaining LEDs to the initial color
        #         SET_LED LED=panel_right RED=0.4 GREEN=0.0 BLUE=0.0 INDEX={led_index}
        #         SET_LED LED=panel_left RED=0.4 GREEN=0.0 BLUE=0.0 INDEX={led_index}
        #     {% endif %}
        # {% endfor %}

        G4 P{refresh_delay}
    {% endfor %}

    STATUS_READY
